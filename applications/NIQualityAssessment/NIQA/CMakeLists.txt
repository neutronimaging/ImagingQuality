cmake_minimum_required(VERSION 3.5)
set(TARGET_NAME "NIQA")
project(${TARGET_NAME} VERSION 4.3 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
find_package(Qt6 REQUIRED COMPONENTS Widgets Charts Concurrent)
#find_package(QT NAMES Qt6 Qt5 COMPONENTS Widgets Charts Concurrent REQUIRED)
#find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets Charts REQUIRED)

include_directories(
    /opt/local/include
    /opt/local/include/libxml2
    /usr/include/libxml2
    ../../../../imagingsuite/core/kipl/kipl/include
    ../../../../imagingsuite/core/modules/ReaderConfig
    ../../../../imagingsuite/core/algorithms/ImagingAlgorithms/include
    ../../../../imagingsuite/core/algorithms/ImagingQAAlgorithms
    ../../../../imagingsuite/GUI/qt/QtAddons
    ../../../../imagingsuite/GUI/qt/QtImaging
    ../../../../imagingsuite/core/modules/ReaderGUI
    ../../external/mac/include/
    ../../../../ExternalDependencies/macos/include
    ../../../ExternalDependencies/macos/include/nexus
    # ../../external/mac/include/hdf5
    Qt6Widgets_INCLUDE_DIRS/QtCharts
    )

set(SRC_FILES
    edgefileitemdialog.cpp	
    main.cpp		
    niqamainwindow.cpp
    edgefittingdialog.cpp	
    niqaconfig.cpp		
    # reportmaker.cpp
)

set(INC_FILES
    edgefileitemdialog.h
	niqaconfig.h
    reportmaker.h
    edgefittingdialog.h	
    niqamainwindow.h
)

set(UI_FILES
    edgefileitemdialog.ui	
    edgefittingdialog.ui	
    niqamainwindow.ui
)

# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
set(MACOSX_BUNDLE_ICON_FILE viewer_icon.icns)

# And the following tells CMake where to find and install the file itself.
set(app_icon_macos "NIQAIcon.icns")
set_source_files_properties(${app_icon_macos} PROPERTIES
        MACOSX_PACKAGE_LOCATION "Resources")

# qt_add_executable(${TARGET_NAME} MACOSX_BUNDLE  ${app_icon_macos})

message(App Qt${QT_VERSION_MAJOR})

#if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(${TARGET_NAME}
        MANUAL_FINALIZATION
#        MACOSX_BUNDLE
        ${SRC_FILES}
        ${INC_FILES}
        ${UI_FILES}
        ${app_icon_macos}
    )
#else()
#        add_executable(${TARGET_NAME}
#            ${PROJECT_SOURCES}
#        )
#endif()

link_directories(../../../lib /opt/local/lib )

target_link_directories(${TARGET_NAME} PRIVATE
    /opt/local/lib
    
    ../../../../ExternalDependencies/macos/arm64/lib
    ../../../../install/lib
    ../../../../imagingsuite/external/mac/lib/
    )

target_link_libraries(${TARGET_NAME} PRIVATE
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Widgets
    Qt${QT_VERSION_MAJOR}::Charts
    Qt${QT_VERSION_MAJOR}::Concurrent
    kipl
    ModuleConfig
    ImagingAlgorithms
    ImagingQAAlgorithms
    ReaderConfig
    QtAddons
    ReaderGUI
    NeXus
    NeXusCPP
    QtModuleConfigure
#    ReconFramework
    QtImaging
    xml2
    armadillo
    lapack
    blas
    tiff
    cfitsio
    hdf5
)

set_target_properties(${TARGET_NAME} PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER ch.psi.imageviewer
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(${TARGET_NAME})
endif()

install(TARGETS ${TARGET_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/applications
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/applications/${TARGET_NAME}.app/Contents/Frameworks)
